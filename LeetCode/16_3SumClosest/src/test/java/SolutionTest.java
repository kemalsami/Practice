import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class SolutionTest {

    public Solution solution;

    @Before
    public void setSolution(){
        solution = new Solution();
    }

    @Test
    public void leetcode_1(){
        int[] nums = {-1,2,1,-4};
        int target = 1;
        int expected = 2;
        Assert.assertEquals(expected,solution.threeSumClosest(nums,target));
    }

    @Test
    public void leetcode_2(){
        int[] nums = {0,0,0};
        int target = 1;
        int expected = 0;
        Assert.assertEquals(expected,solution.threeSumClosest(nums,target));
    }

    @Test
    public void leetcode_3(){
        int[] nums = {456,406,-431,701,-757,-23,-940,112,17,381,-839,-773,951,138,357,363,142,423,-795,-276,496,-288,-739,998,185,-189,784,979,-257,-535,413,789,444,-816,842,-260,-831,162,18,-87,684,851,341,276,-687,-1,-77,-875,-590,587,549,-5,-594,-221,336,-819,-657,-838,-555,844,599,-311,-31,821,601,98,-378,53,477,-64,-645,84,-924,769,-725,-514,290,-604,-617,-485,-805,346,957,-312,-278,-42,-178,-931,384,-130,530,-683,332,-395,-57,52,813,487,8,-802,905,-997,184,615,109,729,42,786,-432,-549,-342,395,-74,-843,478,694,136,-750,351,114,-814,742,11,-760,-181,-111,-201,-934,241,777,-343,-73,397,29,946,-996,915,802,-78,-20,-19,-163,-147,775,-459,883,631,-153,561,-702,512,-443,-293,-455,507,866,-658,955,918,-772,164,-7,-811,752,-262,56,-720,75,647,755,247,-560,373,-500,-390,-861,634,403,-142,-441,146,-574,-55,932,391,-641,280,80,55,237,-124,-351,-745,-179,-821,-612,-285,-833,147,-510,-279,562,-94,-76,-410,830,-548,267,-216,-828,418,-314,904,45,-364,-338,214,-730,-592,-474,12,-855,-349,334,294,-910,-714,199,557,-904,-798,-880,672,514,451,394,795,961,-22,624,552,-717,97,-366,298,270,707,801,-533,374,-79,196,419,-85,765,525,-253,-131,727,-98,36,-157,-949,-743,-809,-249,-138,-566,415,-832,225,-952,783,60,-457,-922,-495,30,26,259,285,462,-806,-345,-154,100,-26,-70,-759,-106,-47,-793,-389,-651,-492,111,-588,-653,-562,-964,782,609,-58,-48,211,-661,-670,-268,41,-6,25,959,145,-573,-10,-894,627,-740,219,90,-945,-718,64,-411,-625,-404,-336,791,-520,-484,-957,-355,83,187,-451,-522,21,887,226,-203,812,608,858,547,-768,13,-677,-462,400,-524,-761,129,-321,-696,130,-194,-348,711,625,-841,-837,-938,695,194,705,-75,881,770,-801,-90,210,-217,582,-452,491,461,996,-245,469,-583,593,-679,460,-686,-266,962,735,-942,779,-935,-208,-1000,898,-417,-93,-601,709,-247,665,475,563,455,855,-877,894,-581,443,-744,-871,-11,-735,-654,-584,-847,250,16,-290,878,-396,268,-605,-756,-214,369,-319,398,-824,-644,370,776,781,773,-671,-609,-118,-789,272,676,-196,-873,-400,-804,-586,6,785,125,102,749,604,-315,913,340,689,-817,-864,524,535,771,526,243,-428,616,893,551,-905,645,-368,-958,595,-206,82,808,620,-283,968,-125,613,389,-866,-879,-193,-49,258,584,569,-884,805,819,-62,-738,427,-669,-150,-546,-493,203,-666,875,-748,-673,757,927,685,659,-791,761,-878,51,238,-8,911,903,897,-988,847,-848,-954,900,-52,-978,-762,912,581,151,726,-705,-693,365,-56,150,-318,909,-173,-470,254,-719,-729,-961,922,906,716,846,-423,-328,497,471,-626,-783,985,588,69,442,-796,-63,-148,-881,149,-230,603,-591,484,-166,-347,-220,-61,-358,-525,-168,-360,-320,505,793,-309,-41,-190,-682,984,867,-359,360,315,407,-913,-567,457,-943,-454,-183,845,-921,-35,-132,-898,754,72,-700,-513,-478,-777,973,943,591,611,817,619,207,133,-426,-834,474,-895,895,-956,-578,-517,182,480,-923,410,930,-986,-354,95,-272,-642,876,354,556,14,-72,-134,-627,924,261,345,321,-256,935,-993,124,-422,568,767,833,-209,532,-638,715,-622,-754,-250,-556,74,34,-137,352,23,-308,183,539,449,-998,-477,38,-135,501,-844,-419,92,655,152,337,224,-184,77,816,-896,-613,201,-511,760,362,358,638,299,-145,-842,-331,-363,564,-346,-736,198,-681,580,-728,-399,-204,618,379,-225,-678,-486,-445,-71,-676,-643,664,-66,871,-611,127,-294,47,-799,139,668,-433,857,-280,950,-369,-787,-501,-270,938,553,-558,868,804,-982,-480,515,-698,-818,-92,-685,300,479,-388,-306,-362,-893,-610,-391,248,-80,-858,-863,-327,448,-265,-383,-568,-707,-151,-721,-582,536,376,-747,652,-334,161,-629,-571,-296,-242,-248,-156,714,-211,494,-99,661,420,799,669,-990,-141,-846,835,-286,560,953,592,854,-953,-769,737,-684,-962,-972,-197,107,28,46,680,-853,630,-406,-45,353,-397,349,424,-207,-888,971,485,176,879,-639,-174,-665,988,874,513,173,-652,610,-2,-231,-723,57,692,853,235,232,-647,891,590,-887,438,-908,227,175,-534,405,-461,-162,-973,-764,-439,200,110,-295,-291,61,-473,-361,651,602,503,-840,324,-900,-175,730,809,385,567,702,686,531,-264,4,-67,-620,-15,-222,396,-675,995,-538,113,-128,-155,-330,431,852,-767,-749,-733,470,-649,251,-401,-479,54,-38,992,-929,-199,-947,319,972,-281,954,662,302,-200,371,-603,86,9,-123,-322,-487,366,481,948,-357,236,-274,566,-105,-65,-699,-84,577,-236,-267,-252};
        int target = -974;
        int expected = -974;
        Assert.assertEquals(expected,solution.threeSumClosest(nums,target));
    }

    @Test
    public void allNegativeNumbers(){
        int[] nums = {-1,-2,-3,-4,-5,-6};
        int target = 1;
        int expected = -6;
        Assert.assertEquals(expected,solution.threeSumClosest(nums,target));
    }


    @Test
    public void closestNumberSumsNotCorrect_1(){
        int[] nums = {-98, -1, 0, 2, 3, 4, 5, 98};
        int target = 3;
        int expected = 3;   // -98, 98, 3
        Assert.assertEquals(expected,solution.threeSumClosest(nums,target));
    }

    @Test
    public void closestNumberSumsNotCorrect_2(){
        int[] nums = {-98, -1, 0, 2, 3, 4, 5, 98};
        int target = 4;
        int expected = 4;   // -98, 98, 4
        Assert.assertEquals(expected,solution.threeSumClosest(nums,target));
    }

    @Test
    public void closestNumberSumsNotCorrect_3(){
        int[] nums = {-98, -1, 0, 2, 3, 4, 5, 98};
        int target = -2;
        int expected = -1;   // -98, 98, -1
        Assert.assertEquals(expected,solution.threeSumClosest(nums,target));
    }

}
